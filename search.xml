<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于Ubuntu下ping不通局域网的问题</title>
      <link href="/2021/12/24/%E5%85%B3%E4%BA%8EUbuntu%E4%B8%8Bping%E4%B8%8D%E9%80%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2021/12/24/%E5%85%B3%E4%BA%8EUbuntu%E4%B8%8Bping%E4%B8%8D%E9%80%9A%E5%B1%80%E5%9F%9F%E7%BD%91%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="问题出现背景"><a href="#问题出现背景" class="headerlink" title="问题出现背景"></a>问题出现背景</h2><p>使用synergy软件，可以用一套键鼠控制不同的两台电脑（win+linux），但是前提是两台电脑需要连接到同一局域网中。</p><p>具体情况信息：</p><blockquote><p>无线连接<br>Linux的IP地址：192.168.1.148<br>Win的IP地址：192.168.1.110<br>Linux和Win的防火墙均关闭</p></blockquote><p>在具体的操作过程中，出现了很奇怪的现象：在Ubuntu下，在终端<code>Ping 192.168.1.110</code>会出现 <code>From 192.168.1.1 icmp_seq=1 Destination Host Unreachable</code>，即在Linux下连不通内网，但是上外网是可以的。<br>当然，Linux下<code>Ping 192.168.1.148</code>（自己）是正常的。</p><h2 id="问题分析及解决"><a href="#问题分析及解决" class="headerlink" title="问题分析及解决"></a>问题分析及解决</h2><p>在终端下输入<code>arp -a</code>，会出现</p><pre><code>?(192.168.1.110) 位于 &lt;incomplete&gt; 在 eth1?(192.168.1.148) 位于&lt;incomplete&gt; 在 eth1?(192.168.1.1) 位于 b0:---0d [ether] 在 wlan1</code></pre><p>虽然不知道具体表达什么意思，似乎内网其他ip地址不是在合适的地方，网卡eth1出来捣乱了。所以我把eth1禁用试了一下：<code>sudo ifconfig eth1 down</code>，再执行<code>arp -a</code>会显示</p><pre><code>?(192.168.1.110) 位于 40:--:7b [ether] 在 wlan1?(192.168.1.1) 位于 b0:---0d [ether] 在 wlan1</code></pre><p>结果再执行<code>ping 192.168.1.110</code>就可以ping通了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>解决Ping不通的问题，需要考虑的方向：</p><blockquote><ol><li>防火墙问题，是否关闭了 </li><li>网卡问题，是否别的网卡影响无线网卡 </li><li>局域网问题，确保路由器正常或两台电脑确定连在同一路由器上，确保网段一致</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像序列转成视频文件-Python代码</title>
      <link href="/2021/12/23/%E5%9B%BE%E5%83%8F%E5%BA%8F%E5%88%97%E8%BD%AC%E6%88%90%E8%A7%86%E9%A2%91-%E4%BB%A3%E7%A0%81/"/>
      <url>/2021/12/23/%E5%9B%BE%E5%83%8F%E5%BA%8F%E5%88%97%E8%BD%AC%E6%88%90%E8%A7%86%E9%A2%91-%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>把一组带有图片序列文件的文件夹，用python合成视频文件，并可以对图片序列文件进行排序，防止合成错乱。</p><h2 id="依赖库"><a href="#依赖库" class="headerlink" title="依赖库"></a>依赖库</h2><ul><li>opencv-python</li><li>unicodedata</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># coding:utf-8</span><span class="token keyword">import</span> cv2<span class="token keyword">import</span> os<span class="token comment"># 获取当前目录</span>os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">is_number</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""判断是不是数字    """</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token builtin">float</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>        <span class="token keyword">pass</span>     <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">import</span> unicodedata        unicodedata<span class="token punctuation">.</span>numeric<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">except</span> <span class="token punctuation">(</span>TypeError<span class="token punctuation">,</span> ValueError<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>     <span class="token keyword">return</span> <span class="token boolean">False</span>  <span class="token keyword">def</span> <span class="token function">find_continuous_num</span><span class="token punctuation">(</span>astr<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""寻找连续数字    """</span>    num <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token keyword">not</span> is_number<span class="token punctuation">(</span>astr<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> c <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>astr<span class="token punctuation">)</span><span class="token punctuation">:</span>            c <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">while</span> is_number<span class="token punctuation">(</span>astr<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> c <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>astr<span class="token punctuation">)</span><span class="token punctuation">:</span>            num <span class="token operator">+=</span> astr<span class="token punctuation">[</span>c<span class="token punctuation">]</span>            c <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">if</span> num <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">comp2filename</span><span class="token punctuation">(</span>file1<span class="token punctuation">,</span> file2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""比较文件名称    """</span>    smaller_length <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>file2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> smaller_length<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> is_number<span class="token punctuation">(</span>file1<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">not</span> is_number<span class="token punctuation">(</span>file2<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># print('both not number')</span>            <span class="token keyword">if</span> file1<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">&lt;</span> file2<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> file1<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">></span> file2<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> file1<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> file2<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> c <span class="token operator">==</span> smaller_length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>                    <span class="token comment"># print('the last bit')</span>                    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>file2<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token boolean">True</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>        <span class="token keyword">if</span> is_number<span class="token punctuation">(</span>file1<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">not</span> is_number<span class="token punctuation">(</span>file2<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> is_number<span class="token punctuation">(</span>file1<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> is_number<span class="token punctuation">(</span>file2<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> is_number<span class="token punctuation">(</span>file1<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> is_number<span class="token punctuation">(</span>file2<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> find_continuous_num<span class="token punctuation">(</span>file1<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> find_continuous_num<span class="token punctuation">(</span>file2<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">def</span> <span class="token function">sort_insert_filename</span><span class="token punctuation">(</span>file_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""对文件名称进行排序，保证数字的连续性    """</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>file_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> file_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        j <span class="token operator">=</span> i        <span class="token keyword">while</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> comp2filename<span class="token punctuation">(</span>x<span class="token punctuation">,</span> file_list<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            file_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> file_list<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            j <span class="token operator">-=</span> <span class="token number">1</span>        file_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x    <span class="token keyword">return</span> file_list<span class="token keyword">def</span> <span class="token function">img2video</span><span class="token punctuation">(</span>img_root<span class="token punctuation">,</span> dst_name<span class="token punctuation">,</span> fps<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""将一组图片序列转化为视频文件    Args:        img_root (str): 图片序列的文件夹地址        dst_name ([type]): 输出的视频文件地址        fps (int, optional): 输出视频序列的帧数. Defaults to 24.    """</span>    img_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>image_root<span class="token punctuation">)</span>    img_list <span class="token operator">=</span> sort_insert_filename<span class="token punctuation">(</span>img_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>img_list<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>img_list<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token comment"># 检测图片的长和宽</span>        img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>image_root<span class="token punctuation">,</span> img_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        w<span class="token punctuation">,</span>h <span class="token operator">=</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"no image in &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>image_root<span class="token punctuation">)</span><span class="token punctuation">)</span>    fps <span class="token operator">=</span> fps    fourcc <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoWriter_fourcc<span class="token punctuation">(</span><span class="token operator">*</span><span class="token string">'XVID'</span><span class="token punctuation">)</span>    video_writer <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoWriter<span class="token punctuation">(</span>filename<span class="token operator">=</span>dst_name<span class="token punctuation">,</span> fourcc<span class="token operator">=</span>fourcc<span class="token punctuation">,</span> fps<span class="token operator">=</span>fps<span class="token punctuation">,</span> frameSize<span class="token operator">=</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> img_path <span class="token keyword">in</span> img_list<span class="token punctuation">:</span>        <span class="token comment"># 逐张写入视频</span>        path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>image_root<span class="token punctuation">,</span> img_path<span class="token punctuation">)</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#判断图片是否存在</span>            img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>filename<span class="token operator">=</span>path<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        video_writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>img_path <span class="token operator">+</span> <span class="token string">' done!'</span><span class="token punctuation">)</span>    video_writer<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    image_root <span class="token operator">=</span> <span class="token string">'./test_img/'</span>    dst_name <span class="token operator">=</span> <span class="token string">'./test_img.mp4'</span>    fps <span class="token operator">=</span> <span class="token number">24</span>    img2video<span class="token punctuation">(</span>image_root<span class="token punctuation">,</span>dst_name<span class="token punctuation">,</span>fps<span class="token operator">=</span>fps<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'finished'</span><span class="token punctuation">)</span>    <span class="token comment"># 测试文件列表排序</span>    <span class="token comment"># print(sort_insert_filename(['a09', 'a2', 'b2', 'a10','a100', 'a01', 'a010', '_a3', 'a893', 'a90']))</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 图像 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blendshape Retargeting 入门笔记</title>
      <link href="/2021/12/22/blendshape%20retargeting%20%E5%9F%BA%E7%A1%80%E4%B8%8E%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0%E6%95%B4%E7%90%86/"/>
      <url>/2021/12/22/blendshape%20retargeting%20%E5%9F%BA%E7%A1%80%E4%B8%8E%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>这里的blendshape指的是人脸模型表情的表示方式，所以这是一篇关于模型表情的笔记</li><li>本篇笔记主要关注算法上的实现，而不是CG或3D软件，如maya，ue等软件上的实现。</li></ul><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>Blendshape Retargeting,  被称为<strong>表情重定向</strong>问题，指的是将一个人脸模型的表情迁移到另一个模型上。包括真实人脸的表情迁移到3D人脸模型上，或者把A人脸模型的表情迁移到B人脸模型上。比如电影中，用真人来驱动阿凡达的脸部表情，就是一个表情重定向的过程。PS：在这里，默认为人脸模型的表情由Blendshape驱动。</p><p><strong>TODO</strong>：放图</p><h2 id="一些基础知识"><a href="#一些基础知识" class="headerlink" title="一些基础知识"></a>一些基础知识</h2><h3 id="1-表情和Blendshape的关系"><a href="#1-表情和Blendshape的关系" class="headerlink" title="1. 表情和Blendshape的关系"></a>1. 表情和Blendshape的关系</h3><ul><li>现在业界在做表情动画时，都是基于blendshape或者骨骼来实现，大部分还是偏向用blendshape来做表情，因为操作起来会更方便一些。</li><li>每个模型会做一系列的基表情，比如闭眼、张嘴等，这样，从一个自然的表情到闭眼的基表情之间，做一个blendshape，就形成了眨眼的表情动画效果。</li></ul><p><strong>TODO</strong>：补基表情的图</p><ul><li>blendshape和表情动画的数学表示<ul><li>将表情模型看做 $N$ 个表情基模型：$B=[b_0,…,b_N]$, $b_0$ 可以看作无任何表情的中性表情。每一个基表情都会对应一个表情系数 $E=[e_0,…,e_N]$，组合起来就形成了各种各样的表情：<br>$$<br>F = b_0+\sum^{N}_{i}e_i(b_i-b_0), e_i\in[0,1]<br>$$</li></ul></li></ul><h3 id="2-常用的blendshape标准"><a href="#2-常用的blendshape标准" class="headerlink" title="2. 常用的blendshape标准"></a>2. 常用的blendshape标准</h3><ul><li>通用的是51维blendshape<ul><li>包括eyeblink, eyeopen, jawopen, liptogether等维度</li></ul></li><li>苹果标准<ul><li><a href="https://developer.apple.com/documentation/arkit/arfaceanchor/2928251-blendshapes">https://developer.apple.com/documentation/arkit/arfaceanchor/2928251-blendshapes</a></li></ul></li></ul><h3 id="3-拓扑结构是什么"><a href="#3-拓扑结构是什么" class="headerlink" title="3. 拓扑结构是什么"></a>3. 拓扑结构是什么</h3><ul><li>拓扑结构一般指顶点数、三角面片数和三角面片连接关系</li></ul><h3 id="4-稀疏表示和稀疏编码"><a href="#4-稀疏表示和稀疏编码" class="headerlink" title="4. 稀疏表示和稀疏编码"></a>4. 稀疏表示和稀疏编码</h3><ul><li>有时会遇到稀疏表示的问题，可以参考下列文章</li><li><a href="https://www.pianshen.com/article/74041446901/">https://www.pianshen.com/article/74041446901/</a></li></ul><h2 id="一些有用的文章或博客"><a href="#一些有用的文章或博客" class="headerlink" title="一些有用的文章或博客"></a>一些有用的文章或博客</h2><h3 id="论文："><a href="#论文：" class="headerlink" title="论文："></a>论文：</h3><ul><li><a href="http://www.scribblethink.org/Work/Pdfs/blendshapes_MAIN.pdf">Practice and Theory of Blendshape Facial Models</a>（入门级文章，主要讲解blendshape的一些基本知识）</li><li><a href="http://www.cs.unc.edu/~jdh/documents/thesis_master.pdf">基于变形迁移的表情克隆及其应用</a>（中科院硕士论文，可以当基础知识来看）</li></ul><h3 id="博客："><a href="#博客：" class="headerlink" title="博客："></a>博客：</h3><ul><li><a href="https://blog.csdn.net/zb1165048017/article/details/115491531">卡通角色表情驱动系列一</a>  （讲解表情驱动的博客）</li><li><a href="https://blog.csdn.net/zb1165048017/article/details/118864029">卡通角色表情驱动系列二</a>  （讲解网格变形的博客）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 未完工 </tag>
            
            <tag> 表情动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/12/21/Hello%20World/"/>
      <url>/2021/12/21/Hello%20World/</url>
      
        <content type="html"><![CDATA[<h2 id="出发"><a href="#出发" class="headerlink" title="出发"></a>出发</h2><p>2021年冬至。</p><p>第一篇献给Hello World。</p><p>放弃CSDN，转战Hexo，希望自己可以坚持下来，记录一些自己的东西，也能产出一些真正有用的内容。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
